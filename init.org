#+TITLE: Ocillacube's Emacs Config v2.0
#+PROPERTY: header-args :tangle init.el

[[./logo.png]]
* Welcome to my Emacs config
** How to setup
First BACK UP your existing emacs config, and run `git clone https://github.com/Ocillacubes/Emacs ~/.emacs.d && emacs`
** Screenshots
** Planned features:
- Take new screenshots
- mu4e
- Rss feed built in
- Come up with a name


* Packages
** Setup package sources
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))
#+END_SRC
** Setup use-package
Use package is a nicer way of managing the packages in emacs. Also enables always ensure so that packages get downloaded automatically
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(setq use-package-always-ensure t)
#+END_SRC

* Keybindings
** Evil mode
Gives emacs vim keybinds, making it actually useable
#+BEGIN_SRC emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1))
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+END_SRC
** Escape Quits
Use escape to quit prompts
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC
** Zoom
Keybinds for zooming in/out
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+END_SRC
** General
Package for setting keybinds, this section based off the config DT wrote on stream
*** Enable the package
#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup t))
#+end_src
*** Configure keybinds
#+begin_src emacs-lisp
(nvmap :prefix "SPC"
  "SPC"    '(counsel-M-x :which-key "M-x") ;; Broken
  "f f"    '(find-file :which-key "Find File")
  "f d"    '(dired :which-key "Open dired")
  "f t"    '(treemacs :which-key "Open treemacs")
  "o t"    '(org-babel-tangle :which-key "Tangle Org File")
  "o i"    '(org-toggle-inline-images :which-key "Show/Hide img (org)")
  "s"      '(swiper :which-key "Search in File")
  "r r"    '((lambda () (interactive) (load-file "~/.emacs.d/init.el")) :which-key "Reload emacs config")
  "h h"    '(mark-whole-buffer :which-key "Select the entire file")
  "\\"     '(indent-region :which-key "Auto indent everything")

  "w c"    '(evil-window-delete :which-key "Close Window")
  "w n"    '(evil-window-new :which-key "New Window")
  "w s"    '(evil-window-split :which-key "Horizontal Split")
  "w v"    '(evil-window-vsplit :which-key "Vertical Split")
  "w h"    '(evil-window-left :which-key "Left Window")
  "w j"    '(evil-window-down :which-key "Down Window")
  "w k"    '(evil-window-up :which-key "Up Window")
  "w l"    '(evil-window-right :which-key "Right Window")
  "w w"    '(evil-window-next :which-key "Next Window")

  "t t"      '(vterm :which-key "Open terminal emulator")
  "t e"      '(eshell :which-key "Open eshell")

  "b b"      '(ibuffer :which-key "List buffers")
  "b c"      '(kill-current-buffer :which-key "Kill current buffer")
  "b h"      '(previous-buffer :which-key "Preivous buffer")
  "b l"      '(next-buffer :which-key "Next buffer")
  )
#+end_src
* Appearance
** Get rid of the default garbage
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-startup-message t) 
(tooltip-mode -1) 
#+END_SRC
** Line numbers
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
(add-hook 'text-mode-hook 'display-line-numbers-mode)
#+END_SRC
** Wrap lines
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode t)
#+END_SRC
** Theme
Currently using gruvbox theme until I get my custom theme setup
#+BEGIN_SRC emacs-lisp
(use-package gruvbox-theme)
(load-theme 'gruvbox-dark-medium t)
;;(load-theme 'adwaita)
#+END_SRC

** Pretty Symbols
Make symbols show up as their symbols
#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode t)
#+END_SRC
** Dashboard
Setup the home screen shown when loading emacs
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :preface
  (defun create-scratch-buffer ()
    "Create a scratch buffer"
    (interactive)
    (switch-to-buffer (get-buffer-create "*scratch*"))
    (lisp-interaction-mode))
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-banner-logo-title "An Emacs Distro for the Devilish User") 
  (setq dashboard-startup-banner "~/.emacs.d/logo.png") 
  (setq dashboard-center-content t) 
  (setq dashboard-show-shortcuts nil) 
  (setq dashboard-set-init-info t) 
  (setq dashboard-init-info (format "%d youkai entered Gensokyou in %s"
				    (length package-activated-list) (emacs-init-time))) 
  (setq dashboard-set-navigator t) 
  (setq dashboard-items '((recents . 3)
			  (agenda . 5)))
  (setq dashboard-navigator-buttons
	`(;; line1
	  ((,nil
	    "Config"
	    "Edit Emacs Config File init.el"
	    (lambda (&rest _) (find-file "~/.emacs.d/init.org"))
	    'default)
	   (nil
	    "Scratchpad"
	    "Open a scratch buffer"
	    (lambda (&rest _) (create-scratch-buffer))
	    'default)
	   (nil
	    "Todo"
	    "Open the TODO list file"
	    (lambda (&rest _) (find-file "~/docs/org/TODO.org"))
	    'default))
	  ((,nil ;;line 2
	    "Githhub"
	    "Visit the github repo"
	    (lambda (&rest _) (browse-url "https://github.com/Ocillacubes/Emacs"))
	    'default))))
  (setq dashboard-footer-messages '("What, you don't have any manga or anything?"
				    "Fairies are completely useless."
				    "You know, watermelons look more like slices of meat than grapes."
				    "I rather dislike the sun..."))) 
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))) ;; Allow emacs to load dashboard when running as a daemon
#+END_SRC

** Scrolling
Make the scrolling in emacs less dumb
#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 101) ;; value greater than 100 gets rid of half page jumping
#+END_SRC
** Icons
Support for displaying icons
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src
** Modeline
Currently just the modeline suggested by witchmacs, but will make a custom one later
#+begin_src emacs-lisp
(use-package diminish)
(use-package spaceline)
(use-package powerline
  :init
  (spaceline-spacemacs-theme)
  :hook
  ('after-init-hook) . 'powerline-reset)
#+end_src
* Autocomplete
** Which Key
Displays keybinds that come after what you've pressed so far
#+BEGIN_SRC emacs-lisp
(use-package which-key)
(which-key-mode)
#+END_SRC
** Ivy
Auto complete for M-x commands
#+begin_src emacs-lisp
(use-package counsel
  :config (counsel-mode))
(use-package ivy
  :diminish
  :bind (
	 :map ivy-minibuffer-map
	 ("TAB" . ivy-alt-done)
	 ("C-l" . ivy-alt-done)
	 ("C-j" . ivy-next-line)
	 ("C-k" . ivy-previous-line)
	 :map ivy-switch-buffer-map
	 ("C-l" . ivy-alt-done)
	 ("C-k" . ivy-previous-line)
	 ("C-d" . ivy-switch-buffer-kill)
	 :map ivy-reverse-i-search-map
	 ("C-k" . ivy-previous-line)
	 ("C-d" . Ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))
#+end_src
* Behavior
** Copy/Paste
Enable support for copy pasting between emacs and the regualr clipboard
#+BEGIN_SRC emacs-lisp
(setq x-select-enable-clipboard t)
#+END_SRC
** Undo/Redo
Makes undo/redo work better with evil mode
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :diminish)
(global-undo-tree-mode)
(define-key evil-normal-state-map "u" 'undo-tree-undo)
(define-key evil-normal-state-map (kbd "C-r") 'undo-tree-redo)
#+END_SRC

** Backup Files
Stop backup files filling up everywhere
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+END_SRC

** Brackets
Pair brackets together and highlight matching brackets
#+begin_src emacs-lisp
(setq electric-pair-pairs '(
			    (?\{ . ?\})
			    (?\( . ?\))
			    (?\[ . ?\])
			    (?\" . ?\")
			    ))
(electric-pair-mode t)
(show-paren-mode 1) 
#+end_src
* Org Mode
** Org Tempo
This allows creating of source blocks with <sTAB , as well as other similar things
#+BEGIN_SRC emacs-lisp
(use-package org-tempo
  :ensure nil)
#+END_SRC
** Native syntax highlighting
Use the language's syntax highlighting for code blocks
#+begin_src emacs-lisp
(setq org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-confirm-babel-evaluate nil
      org-edit-src-content-indentation 0)
#+end_src
** Bullets
Makes * ** etc appears as bullet points rather than *s
#+begin_src emacs-lisp
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src
** Indents
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
#+end_src
** Org directory
#+begin_src emacs-lisp
(setq org-directory "~/docs/org")
#+end_src
* Projectile
Projectile is a tool for managing "projects" and easily working with files in one.
#+begin_src emacs-lisp
(use-package projectile
  :config
  (projectile-global-mode 1))
#+end_src

* Swiper
Swiper is a tool for finding text in a file
#+begin_src emacs-lisp
(use-package swiper)
#+end_src

* Files
** Dired
Built in file manager
*** Binds
#+begin_src emacs-lisp
(with-eval-after-load 'dired
  (evil-define-key'(normal visual) dired-mode-map (kbd "h") 'dired-up-directory)
  (evil-define-key'(normal visual) dired-mode-map (kbd "l") 'dired-open-file))
#+end_src
*** Give icons in dired
#+begin_src emacs-lisp
(use-package all-the-icons-dired)
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+end_src
*** Dired open
Allows files to be opened straight from dired
#+begin_src emacs-lisp
(use-package dired-open)
(setq dired-open-extensions '(("jpg" . "feh")
			      ("png" . "feh")
			      ("gif" . "feh")
			      ("mkv" . "mpv")
			      ("mp4" . "mpv")
			      ("flac" . "mpv")
			      ("mp3" . "mpv")
			      ("pdf" . "zathura")))
#+end_src
** Treemacs
A file explorer similar to Treemacs
#+begin_src emacs-lisp
(use-package treemacs
  :defer t
  :init
  :config
  (progn
    (setq
     treemacs-width        30)
    (treemacs-resize-icons 11)))
(use-package treemacs-evil
  :after treemacs evil
  :ensure t)
(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))
#+End_src
* Shell/Terminal
** Set shell
Sets the shell to zsh because zsh pog
#+begin_src emacs-lisp
(setq shell-file-name "/bin/zsh"
      vterm-max-scrollback 1000)
#+end_src
** Eshell
#+begin_src emacs-lisp
(use-package eshell-syntax-highlighting
  :after esh-mode
  :config
  (eshell-syntax-highlighting-global-mode +1))
(setq eshell-aliases-file "~/.emacs.d/eshell_alias"
      eshell-history-size 1000)
#+end_src
** Vterm
A terminal emulator inside of emacs
#+begin_src emacs-lisp
(use-package vterm)
#+end_src

* Code
Here I have things that are useful specifically for programming, such as LSP, syntax highlighting, and the likes
** Syntax Highlighting
*** Nix
#+begin_src emacs-lisp
(use-package nix-mode
  :mode "\\.nix\\'")
#+end_src
*** Haskell
#+begin_src emacs-lisp
(use-package haskell-mode
  :mode "\\.hs\\'")
#+end_src
*** Go
#+begin_src emacs-lisp
(use-package go-mode)
#+end_src
** Company
Company gives a big large drop down menu to choose from
#+begin_src emacs-lisp
(use-package company)
(setq company-idle-delay 0)
(setq company-minimum-prefix-length 1)
#+end_src
** LSP
LSP stands for Language Server Protocol, and gives emacs some cool features for working with programming languages
*** Base
#+begin_src emacs-lisp
(use-package lsp-mode)
(use-package lsp-ui
  :diminish
  :config
  (add-hook 'lsp-mode-hook 'lsp-ui-mode))
#+end_src
*** Go
#+begin_src emacs-lisp
(defun lsp-go-install-save-hooks () -- Taken from an article on GeekSocket by Bhavin Gandhi
       (add-hook 'before-save-hook #'lsp-format-buffer t t)
       (add-hook 'before-save-hook #'lsp-organize-imports t t))
(add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
(add-hook 'go-mode-hook #'lsp-deferred)
#+end_src
*** Python
#+begin_src emacs-lisp
(use-package lsp-python-ms
  :init (setq lsp-python-ms-auto-install-server t)
  :hook (python-mode . (lambda ()
			 (require 'lsp-python-ms)
			 (lsp))))
#+end_src
** Flycheck
Flycheck provides syntax checking
*** Base
#+begin_src emacs-lisp
(use-package flycheck)
#+end_src
*** Haskell
#+begin_src emacs-lisp
(use-package flycheck-haskell)
(add-hook 'haskell-mode-hook 'flycheck-mode)
(add-hook 'haskell-mode-hook #'flycheck-haskell-setup)
#+end_src
** Web mode
Web mode adds some nice features for working with web based files such as html
#+begin_src emacs-lisp
(use-package web-mode)
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(setq web-mode-extra-auto-pairs
      '(("erb"  . (("beg" "end")))
	("php"  . (("beg" "end")
		   ("beg" "end")))
	))
(setq web-mode-enable-auto-pairing t)
#+end_src
